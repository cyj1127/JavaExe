02.13
--스레드--
-처음 실행되는 스레드를 메인스레드라고 한다.

-메인스레드는 메인함수를 처리한다.

-서버 프로그램은 스레드를 반드시 필요로 한다,멀티스레드를 제어하는것을 필수로 한다.
서버의 경우 웹에서 언제 신호를 보낼지 모르기 때문에 멀티스레드가 필요하다.
ex)장사가 잘되는 집에 주인이 1명이면 여러손님을 처리하기 힘들다.
메인 스레드 뿐만 아니라 별도의 워크스레드를 사용한다.(알바생같은 역할)

-sleep()은 ()안에 넣은 값 만큼 시간을 멈춘다
-join()은 run()이 리턴되면 실행이 된다.


-프로젝트-(그림참조)
1)어플리케이션을 개발하는데 DBMS를 공부해서 연동시키는 방법
2)앱을 2개로 나눠 주고받는 패킷을 이용해 만드는 법 ( 파일로 저장)
3)클라이언트 - 서버 - DB 모두 이용하는 방법
5일동안 프로젝트 제작 - 5일차 오전까지 제작 - 5일차 오후에 발표

-언제든 다른 스레드에 제어권이 넘어가는 것을
Context Switching 이라고 한다.

-num++ 연산의 안전한 마무리까지 스레드 제어권을 유지해야한다.
이 행위를 동기화라고 표현한다.

-메서드 자체를 보호 할 때 synchronized를 붙혀준다.

-Notify-
 기다리는 다른 스레드는 wait에서 탈출하고 동작시작	
 상대를 깨우는 것
 
 -wait-
 내 스레드는 wait상태로 들어간다.
 내가 잠든다.
 
 데몬 스레드(종속 스레드)
-부모 스레드가 종료되면 자식도 함께 종료

/*C/C++은 원래 데몬 스레드이다.
	 * C#/JAVA는 위의 속성을 없애기 위한 별도의 동기화작업이 필요하다.
	 * 그래서 불편해서 그냥 별개로 동작하도록 만들었고
	 * 아래처럼 setDaemon(true)일 때 종속적이도록 만들었다.
	 
-Pool-
프로그램 속도 향상을 위해 스레드를 미리 많이 만들어놓고 돌려쓰는 방식
ex)식당에 손님이 300명이라고 테이블이 300개가 필요하지는 않다!
	30개의 테이블로 회전한다.
	
-Runnable-
결과값을 따로 받지 않을 때 사용

-Callable-
결과값을 받고싶을 때 자료형을 선언해주면서 사용한다.Callable<String>

02.14
---생성자---
-생성자는 객체가 생성될 때 객체의 초기화를 위해 사용한다.
-생성자는 클래스의 이름과 동일해야한다.
-생성자는 다른 메소드와 다르게 리턴 타입이 없다.
-생성자는 객체가 생성될 때 자동으로 한 번 호출된다.
-생성자는 매개변수 조건에 따라 여러개를 작성할 수 있다.(오버라이딩)
-생성자는 클래스에 최소 1개는 있어야 하며, 생성자 코드가 없을 경우 컴파일러가 기본생성자를 자동으로 생성한다.
-주의할점은, 생성자 코드가 1개라도 작성되어 있다면, 컴파일러는 기본생성자가 없다고 하더라도 기본생성자를
자동으로 생성하지 않는다.

---매개변수와 인자의 차이---
-인자(argument)
인자는 메소드, 생성자를 호출할때 데이터를 매개변수에 값을 전달해준다.
System.out.println(sum(3,5)); 여기서 3,5가 인자

-매개변수(parameter)
매개변수는 메소드, 생성자를 선언할 때, 어떤 형태로 데이터값이 들어올지 정의해준다.
public static int sum(int a, int b) 여기서 int a,b가 매개변수이다.

---객체 초기화 이유---
클래스 내에서 매개변수를 선언할 경우 컴파일러가 자동으로 값을 할당해주지만
메소드 내에서는 자동으로 값이 할당되지 않기 때문에 따로 초기화를 해주어야 한다.
메인메소드 또한 메소드이기 때문에 초기값을 할당해주어야 한다.

---변수의 종류---
변수의 종류로는 크게 2가지가 있다.
1.지역변수
메소드에서 선언된 변수들이다. 이 때 지역변수는 기본으로 값이 할당되어있지 않기 때문에 
필수적으로 초기화를 해야한다.
2.필드,멤버 변수
클래스에서 선언된 변수들이다. 변수 선언시 기본적으로 값이 할당되어 있기 때문에 
선택적으로 초기화를 할 수 있다.
-명시적 초기화-
변수를 선언함과 동시에 대입연산자 '=' 를 통해 값을 넣어주는 것.ex)int a = 5;

---클래스, 객체, 인스턴스 개념---
1)클래스
-객체를 만들어 내기 위한 설계도 혹은 틀
-연관되어 있는 변수와 메서드의 집합

2)객체(Object)
-객체는 클래스에 의해 정의되고 설계된 내용을 기반으로 생성된다.
-객체의 속성은 필드(변수), 행위는 메서드에 해당한다.
-객체의 생성은 new 키워드를 통해 생성이 가능하다.
-생성된 객체는 포인트 연산자(.)를 통해 해당 객체의 멤버에 접근이 가능하다.
-이렇게 생성된 객체를 인스턴스라 하며, 인스턴스는 여러 개 생성될 수 있다.

3)인스턴스(Instance)
-객체와 인스턴스는 크게 차이를 보이지는 않는다. 따라서 두 용어를 혼용하여 사용하기도 한다.
-객체는 모든 인스턴스를 포괄하는 넓은 의미를 가지고, 인스턴스는 해당 객체가 
어떤 클래스로부터 생성된 것인지를 강조한다.

---스트림---
1)간결하게 만드는 목적
2)람다식에 사용
3)병렬처리 연산속도 향상
4)C# LINQ > Java Stream
5) DB SQL 방식의 영향

Stream = 강물줄기, 개울,시내
방향성이 있다, 한 방향으로 흐른다.

데이터를 꺼낼 수 있게 줄세워놓는다.(준비)

스트림의 중간연산 단계는 여러번 일어날 수 있다.
(가공 과정이 여러번 일어날 수 있음)

한 번 사용한 스트림은 재사용이 불가능하다.(내부 데이터를 이미 다 흘려 보냈다..)

List는 컬렉션의 상속을 받는다.

02.16
웹서버 = Http를 사용하는 것
Was = 미들웨어라고 한다.

Server - 서비스를 제공하는 사람
Client - 고객을 의미한다.
Host : 주소(ex.강원도 강릉..)
Port : 호수(ex.포커룸 105호)

과거에는 XML을 많이 썼지만
요즘은 JSON을 많이 쓴다.

JSON의 특징
key와 value 값으로 구성된다.
key = 변수이름
value = 값