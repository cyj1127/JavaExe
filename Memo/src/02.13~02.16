--스레드--
-처음 실행되는 스레드를 메인스레드라고 한다.

-메인스레드는 메인함수를 처리한다.

-서버 프로그램은 스레드를 반드시 필요로 한다,멀티스레드를 제어하는것을 필수로 한다.
서버의 경우 웹에서 언제 신호를 보낼지 모르기 때문에 멀티스레드가 필요하다.
ex)장사가 잘되는 집에 주인이 1명이면 여러손님을 처리하기 힘들다.
메인 스레드 뿐만 아니라 별도의 워크스레드를 사용한다.(알바생같은 역할)

-sleep()은 ()안에 넣은 값 만큼 시간을 멈춘다
-join()은 run()이 리턴되면 실행이 된다.


-프로젝트-(그림참조)
1)어플리케이션을 개발하는데 DBMS를 공부해서 연동시키는 방법
2)앱을 2개로 나눠 주고받는 패킷을 이용해 만드는 법 ( 파일로 저장)
3)클라이언트 - 서버 - DB 모두 이용하는 방법
5일동안 프로젝트 제작 - 5일차 오전까지 제작 - 5일차 오후에 발표

-언제든 다른 스레드에 제어권이 넘어가는 것을
Context Switching 이라고 한다.

-num++ 연산의 안전한 마무리까지 스레드 제어권을 유지해야한다.
이 행위를 동기화라고 표현한다.

-메서드 자체를 보호 할 때 synchronized를 붙혀준다.

-Notify-
 기다리는 다른 스레드는 wait에서 탈출하고 동작시작해
 상대를 깨우는 것
 
 -wait-
 내 스레드는 wait상태로 들어간다.
 내가 잠든다.
 
 데몬 스레드(종속 스레드)
-부모 스레드가 종료되면 자식도 함께 종료

/*C/C++은 원래 데몬 스레드이다.
	 * C#/JAVA는 위의 속성을 없애기 위한 별도의 동기화작업이 필요하다.
	 * 그래서 불편해서 그냥 별개로 동작하도록 만들었고
	 * 아래처럼 setDaemon(true)일 때 종속적이도록 만들었다.
	 
-Pool-
프로그램 속도 향상을 위해 스레드를 미리 많이 만들어놓고 돌려쓰는 방식
ex)식당에 손님이 300명이라고 테이블이 300개가 필요하지는 않다!
	30개의 테이블로 회전한다.
	
-Runnable-
결과값을 따로 받지 않을 때 사용

-Callable-
결과값을 받고싶을 때 자료형을 선언해주면서 사용한다.